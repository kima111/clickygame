{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akim\\\\Desktop\\\\Coding\\\\Assignment15\\\\Clicky-Game\\\\clicky-game\\\\src\\\\components\\\\gameboard.js\";\nimport React, { Component } from 'react';\nimport \"./index.scss\";\nimport Card from './Card';\nimport Cards from \"./cards.json\";\nimport \"./index.scss\";\nvar alreadyPicked = [];\nvar status = \"Not yet started\";\nvar counting = 0;\nvar highScore = 0;\nconst styles = {\n  heading: {\n    color: \"white\",\n    textDecoration: \"none\"\n  },\n  tagline: {\n    marginLeft: \"5px\",\n    marginTop: \"-10px\"\n  },\n  button: {\n    marginLeft: \"-8px\"\n  },\n  button2: {\n    marginLeft: \"5px\"\n  },\n  center: {\n    borderStyle: \"solid\",\n    borderWidth: \"5px\",\n    borderRadius: \"5px\",\n    opacity: \"1\",\n    color: \"white\",\n    backgroundColor: \"rgba(0,0,0,.7)\",\n    height: \"100%\"\n  },\n  fontSize: {\n    fontSize: \"0.9rem\",\n    display: \"inline-block\"\n  },\n  fontSize2: {\n    fontSize: \"0.8\",\n    display: \"inline-block\"\n  }\n};\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nclass GameBoard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0,\n      name: \"\"\n    };\n\n    this.handleIncrement = event => {\n      event.preventDefault();\n      var value = event.target.value;\n\n      for (let i = 0; i < alreadyPicked.length; i++) {\n        //check for value in the array if found then reset status\n        if (value === alreadyPicked[i]) {\n          console.log(\"worked\");\n          alreadyPicked = [];\n          status = \"lose\";\n          counting = 0;\n          this.setState({\n            count: 0\n          });\n        }\n      }\n\n      if (status !== \"lose\") {\n        alreadyPicked.push(value);\n        status = \"winning\";\n\n        if (highScore === counting) {\n          highScore++;\n        }\n\n        counting++;\n        this.setState({\n          count: this.state.count + 1\n        });\n      } else {\n        status = \"Start\";\n      }\n\n      console.log(alreadyPicked);\n    };\n  }\n\n  render() {\n    const shuffledCards = shuffleArray(Cards);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: styles.fontSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Clicky Game Points: \", this.state.count), React.createElement(\"h2\", {\n      style: styles.fontSize2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \" Status: \", status), React.createElement(\"h2\", {\n      style: styles.fontSize2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \" High Score: \", highScore), React.createElement(\"div\", {\n      className: \"fadeUp\",\n      style: styles.center,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, shuffledCards.map(Cards => React.createElement(\"div\", {\n      className: Cards.format,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Card, {\n      value: Cards.title,\n      image: Cards.src,\n      title: Cards.title,\n      description: Cards.description,\n      projectURL: Cards.projectURL,\n      githuborheroku: Cards.githuborheroku,\n      handleIncrement: this.handleIncrement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default GameBoard;","map":{"version":3,"sources":["C:/Users/akim/Desktop/Coding/Assignment15/Clicky-Game/clicky-game/src/components/gameboard.js"],"names":["React","Component","Card","Cards","alreadyPicked","status","counting","highScore","styles","heading","color","textDecoration","tagline","marginLeft","marginTop","button","button2","center","borderStyle","borderWidth","borderRadius","opacity","backgroundColor","height","fontSize","display","fontSize2","shuffleArray","array","i","length","j","Math","floor","random","temp","GameBoard","state","count","name","handleIncrement","event","preventDefault","value","target","console","log","setState","push","render","shuffledCards","map","format","title","src","description","projectURL","githuborheroku"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./index.scss\";\r\nimport Card from './Card';\r\nimport Cards from \"./cards.json\";\r\n\r\n\r\nimport \"./index.scss\";\r\n\r\n\r\n\r\nvar alreadyPicked = [];\r\nvar status = \"Not yet started\"\r\nvar counting =0;\r\nvar highScore = 0;\r\nconst styles = {\r\n  \r\n    heading:{\r\n   \r\n        color: \"white\",\r\n        textDecoration: \"none\"\r\n        \r\n    },\r\n    tagline:{\r\n  \r\n        marginLeft: \"5px\",\r\n        marginTop: \"-10px\"\r\n    },\r\n    button:{\r\n        marginLeft: \"-8px\"\r\n     \r\n    }, \r\n    button2:{\r\n        marginLeft: \"5px\"\r\n    },\r\n    center: {\r\n\r\n        borderStyle: \"solid\",\r\n        borderWidth: \"5px\",\r\n        borderRadius: \"5px\",\r\n        opacity: \"1\",\r\n        color: \"white\",\r\n        backgroundColor: \"rgba(0,0,0,.7)\",\r\n        height:\"100%\",\r\n       \r\n    },\r\n    fontSize: {\r\n        fontSize: \"0.9rem\",\r\n        display: \"inline-block\"\r\n   \r\n    },\r\n    fontSize2:{\r\n        fontSize: \"0.8\",\r\n        display: \"inline-block\"\r\n    }\r\n}\r\n\r\nfunction shuffleArray(array) {\r\n    let i = array.length - 1;\r\n    for (; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n\r\nclass GameBoard extends Component{\r\n\r\n    state={\r\n        count: 0,\r\n        name: \"\",\r\n\r\n    }\r\n\r\n    handleIncrement = event => {\r\n        event.preventDefault();\r\n        var {value } = event.target;\r\n\r\n   \r\n        for(let i=0;i<alreadyPicked.length;i++){\r\n        //check for value in the array if found then reset status\r\n        if(value===alreadyPicked[i]){\r\n            console.log(\"worked\")\r\n            alreadyPicked = []\r\n            status = \"lose\"\r\n            counting = 0\r\n            this.setState({\r\n                count: 0\r\n            })\r\n\r\n        } \r\n        }\r\n        if (status !== \"lose\"){\r\n            alreadyPicked.push(value)\r\n            status = \"winning\"\r\n           \r\n            if(highScore === counting){\r\n            highScore ++\r\n            }\r\n            counting ++\r\n            this.setState({\r\n          \r\n                count: this.state.count + 1,\r\n          \r\n              });\r\n         \r\n        }else{\r\n            status=\"Start\"\r\n        }\r\n       \r\n      console.log(alreadyPicked)\r\n    }\r\n\r\n \r\n    render(){\r\n\r\n        const shuffledCards = shuffleArray(Cards)\r\n        return (\r\n\r\n            <div>\r\n                   \r\n           <h1 style={styles.fontSize}>Clicky Game Points: {this.state.count}</h1><h2 style={styles.fontSize2}> Status: {status}</h2><h2 style={styles.fontSize2}> High Score: {highScore}</h2>\r\n        \r\n       \r\n   \r\n                <div className=\"fadeUp\" style={styles.center}>\r\n                <div className=\"row\">\r\n                {shuffledCards.map(Cards => (\r\n                    <div className={Cards.format}>\r\n                    <Card\r\n                    value={Cards.title}\r\n               \r\n                    image={Cards.src}\r\n                    title={Cards.title}\r\n                    description={Cards.description}\r\n                    projectURL={Cards.projectURL}\r\n                    githuborheroku={Cards.githuborheroku}\r\n                    handleIncrement={this.handleIncrement}\r\n                    />\r\n                    </div>\r\n                ))}\r\n                </div>\r\n                </div>\r\n              \r\n               \r\n            </div>\r\n           \r\n        )\r\n                }\r\n    }\r\nexport default GameBoard;"]},"metadata":{},"sourceType":"module"}